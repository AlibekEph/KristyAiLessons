"""Main FastAPI application"""

from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks, Path, Query
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from typing import Optional, Dict, Any
import os
import logging
from datetime import datetime

from .config import Settings
from .dependencies import (
    get_recording_service,
    get_transcription_service,
    get_ai_processor,
    get_storage_service
)
from .interfaces.recording import RecordingServiceInterface
from .interfaces.transcription import TranscriptionServiceInterface
from .interfaces.ai_processor import AIProcessorInterface, AIProcessingRequest
from .interfaces.storage import StorageServiceInterface, Lesson

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Create FastAPI app
app = FastAPI(
    title="KristyLessonRecords",
    description="""
## –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–Ω–ª–∞–π–Ω-—É—Ä–æ–∫–æ–≤

### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- üé• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å —É—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ Recall.ai
- üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ AssemblyAI
- ü§ñ AI-–æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ YandexGPT
- üìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

### –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
1. **–ö–æ–Ω—Å–ø–µ–∫—Ç —É—Ä–æ–∫–∞** - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ
2. **–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ** - —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
3. **–°–ª–æ–≤–∞—Ä—å** - –∫–ª—é—á–µ–≤–∞—è –ª–µ–∫—Å–∏–∫–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
    """,
    version="1.0.0",
    contact={
        "name": "KristyLessonRecords Support",
        "email": "support@kristylessons.com"
    },
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
    }
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Configure properly in production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Settings
settings = Settings()


# Request/Response models
class RecordLessonRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å —É—Ä–æ–∫–∞"""
    meeting_url: str = Field(
        ..., 
        description="URL –≤—Å—Ç—Ä–µ—á–∏ (Zoom, Google Meet –∏ —Ç.–¥.)",
        example="https://zoom.us/j/1234567890"
    )
    lesson_type: str = Field(
        ..., 
        description="–¢–∏–ø —É—Ä–æ–∫–∞",
        example="chinese",
        pattern="^(chinese|english)$"
    )
    student_id: Optional[str] = Field(
        None,
        description="ID —Å—Ç—É–¥–µ–Ω—Ç–∞",
        example="student_123"
    )
    teacher_id: Optional[str] = Field(
        None,
        description="ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
        example="teacher_456"
    )
    student_level: Optional[str] = Field(
        None,
        description="–£—Ä–æ–≤–µ–Ω—å —Å—Ç—É–¥–µ–Ω—Ç–∞",
        example="beginner",
        pattern="^(beginner|intermediate|advanced)$"
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ",
        example={"topic": "–ß–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10", "lesson_number": 5}
    )

    class Config:
        json_schema_extra = {
            "example": {
                "meeting_url": "https://zoom.us/j/1234567890",
                "lesson_type": "chinese",
                "student_id": "student_123",
                "student_level": "beginner",
                "metadata": {
                    "topic": "–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è",
                    "lesson_number": 1
                }
            }
        }


class LessonResponse(BaseModel):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–µ"""
    id: str = Field(..., description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —É—Ä–æ–∫–∞", example="lesson_1234567890.123")
    status: str = Field(
        ..., 
        description="–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Ä–æ–∫–∞",
        example="recording",
        pattern="^(recording|transcribing|processing|completed|failed)$"
    )
    meeting_url: str = Field(..., description="URL –≤—Å—Ç—Ä–µ—á–∏", example="https://zoom.us/j/1234567890")
    lesson_type: str = Field(..., description="–¢–∏–ø —É—Ä–æ–∫–∞", example="chinese")
    created_at: datetime = Field(..., description="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")
    transcript_available: bool = Field(False, description="–î–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è")
    materials_available: bool = Field(False, description="–î–æ—Å—Ç—É–ø–Ω—ã –ª–∏ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")


class WebhookRequest(BaseModel):
    """Webhook –∑–∞–ø—Ä–æ—Å"""
    event: str = Field(..., description="–¢–∏–ø —Å–æ–±—ã—Ç–∏—è")
    data: Dict[str, Any] = Field(..., description="–î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è")


# API Endpoints
@app.get("/", tags=["Health"])
async def root():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞.
    """
    return {"status": "ok", "service": "KristyLessonRecords"}


@app.post(
    "/lessons/record", 
    response_model=LessonResponse,
    tags=["Lessons"],
    summary="–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å —É—Ä–æ–∫–∞",
    description="""
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –æ–Ω–ª–∞–π–Ω-—É—Ä–æ–∫–∞.
    
    –ü–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ —ç—Ç–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞:
    1. Recall.ai –±–æ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ
    2. –ù–∞—á–Ω—ë—Ç—Å—è –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ
    3. –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
    4. AI –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ —Å–æ–∑–¥–∞—Å—Ç —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    """,
    responses={
        200: {
            "description": "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞",
            "content": {
                "application/json": {
                    "example": {
                        "id": "lesson_1234567890.123",
                        "status": "recording",
                        "meeting_url": "https://zoom.us/j/1234567890",
                        "lesson_type": "chinese",
                        "created_at": "2024-01-20T10:30:00",
                        "transcript_available": False,
                        "materials_available": False
                    }
                }
            }
        },
        500: {"description": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–ø–∏—Å–∏"}
    }
)
async def start_recording(
    request: RecordLessonRequest,
    background_tasks: BackgroundTasks,
    recording_service: RecordingServiceInterface = Depends(get_recording_service),
    storage_service: StorageServiceInterface = Depends(get_storage_service)
):
    """Start recording a lesson"""
    
    try:
        # Create lesson record
        lesson = Lesson(
            id=f"lesson_{datetime.now().timestamp()}",
            meeting_url=request.meeting_url,
            lesson_type=request.lesson_type,
            student_id=request.student_id,
            teacher_id=request.teacher_id,
            status="recording",
            metadata=request.metadata or {}
        )
        
        # Save lesson
        lesson = await storage_service.save_lesson(lesson)
        
        # Start recording
        webhook_url = f"{settings.APP_URL}/webhooks/recall"
        recording_session = await recording_service.start_recording(
            meeting_url=request.meeting_url,
            webhook_url=webhook_url,
            metadata={
                "lesson_id": lesson.id,
                "lesson_type": request.lesson_type,
                "student_level": request.student_level
            }
        )
        
        # Update lesson with recording session ID
        lesson.recording_session_id = recording_session.id
        await storage_service.save_lesson(lesson)
        
        logger.info(f"Started recording for lesson {lesson.id}")
        
        return LessonResponse(
            id=lesson.id,
            status=lesson.status,
            meeting_url=lesson.meeting_url,
            lesson_type=lesson.lesson_type,
            created_at=lesson.created_at
        )
        
    except Exception as e:
        logger.error(f"Failed to start recording: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get(
    "/lessons/{lesson_id}", 
    response_model=LessonResponse,
    tags=["Lessons"],
    summary="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ",
    responses={
        200: {"description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–µ"},
        404: {"description": "–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    }
)
async def get_lesson(
    lesson_id: str = Path(..., description="ID —É—Ä–æ–∫–∞", example="lesson_1234567890.123"),
    storage_service: StorageServiceInterface = Depends(get_storage_service)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ"""
    
    lesson = await storage_service.get_lesson(lesson_id)
    if not lesson:
        raise HTTPException(status_code=404, detail="Lesson not found")
    
    return LessonResponse(
        id=lesson.id,
        status=lesson.status,
        meeting_url=lesson.meeting_url,
        lesson_type=lesson.lesson_type,
        created_at=lesson.created_at,
        transcript_available=lesson.transcription_id is not None,
        materials_available=lesson.materials_id is not None
    )


@app.get(
    "/lessons/{lesson_id}/transcript",
    tags=["Lessons"],
    summary="–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —É—Ä–æ–∫–∞",
    description="""
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —É—Ä–æ–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º–∏ —Å–ø–∏–∫–µ—Ä–∞–º–∏.
    
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∫–ª—é—á–∞–µ—Ç:
    - –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞
    - –°–µ–≥–º–µ–Ω—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
    - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏–∫–µ—Ä–∞—Ö
    - –Ø–∑—ã–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    """,
    responses={
        200: {
            "description": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Ä–æ–∫–∞",
            "content": {
                "application/json": {
                    "example": {
                        "id": "transcript_123",
                        "text": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: –ü—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è –º—ã –∏–∑—É—á–∞–µ–º —á–∏—Å–ª–∞. –ù–∞ –∫–∏—Ç–∞–π—Å–∫–æ–º –æ–¥–∏–Ω –±—É–¥–µ—Ç ‰∏Ä (yƒ´)...",
                        "segments": [
                            {
                                "text": "–ü—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è –º—ã –∏–∑—É—á–∞–µ–º —á–∏—Å–ª–∞.",
                                "start": 0.0,
                                "end": 3.5,
                                "speaker": "Teacher"
                            }
                        ],
                        "language": "ru",
                        "duration": 1800.0
                    }
                }
            }
        },
        404: {"description": "–£—Ä–æ–∫ –∏–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
    }
)
async def get_transcript(
    lesson_id: str = Path(..., description="ID —É—Ä–æ–∫–∞"),
    storage_service: StorageServiceInterface = Depends(get_storage_service)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —É—Ä–æ–∫–∞"""
    
    lesson = await storage_service.get_lesson(lesson_id)
    if not lesson:
        raise HTTPException(status_code=404, detail="Lesson not found")
    
    if not lesson.transcription_id:
        raise HTTPException(status_code=404, detail="Transcript not available")
    
    # Get transcript from storage
    transcript_data = await storage_service.get_json(f"transcript_{lesson.transcription_id}")
    if not transcript_data:
        raise HTTPException(status_code=404, detail="Transcript data not found")
    
    return transcript_data


@app.get(
    "/lessons/{lesson_id}/materials",
    tags=["Lessons"],
    summary="–ü–æ–ª—É—á–∏—Ç—å —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
    description="""
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ AI —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —É—Ä–æ–∫–∞.
    
    –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤–∫–ª—é—á–∞—é—Ç:
    - **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è** - —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞–º–∏ –∏ –ø–∏–Ω—å–∏–Ω—å
    - **–ö–æ–Ω—Å–ø–µ–∫—Ç —É—Ä–æ–∫–∞** - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ
    - **–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ** - —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
    - **–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ** - —á—Ç–æ –∏–∑—É—á–∞–ª–∏ –Ω–∞ —É—Ä–æ–∫–µ
    - **–°–ª–æ–≤–∞—Ä—å** - –∫–ª—é—á–µ–≤–∞—è –ª–µ–∫—Å–∏–∫–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
    """,
    responses={
        200: {
            "description": "–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            "content": {
                "application/json": {
                    "example": {
                        "lesson_id": "lesson_1234567890.123",
                        "corrected_transcript": "–ü—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è –º—ã –∏–∑—É—á–∞–µ–º —á–∏—Å–ª–∞. –ù–∞ –∫–∏—Ç–∞–π—Å–∫–æ–º –æ–¥–∏–Ω –±—É–¥–µ—Ç ‰∏Ä (yƒ´), –¥–≤–∞ - ‰∫å (√®r)...",
                        "summary": "## –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞ —É—Ä–æ–∫–∞\n–ß–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10 –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–µ\n\n## –ò–∑—É—á–µ–Ω–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞\n- ‰∏Ä (yƒ´) - –æ–¥–∏–Ω\n- ‰∫å (√®r) - –¥–≤–∞...",
                        "homework": "## –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤—É—é –ª–µ–∫—Å–∏–∫—É\n1. –ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10 –∏–µ—Ä–æ–≥–ª–∏—Ñ–∞–º–∏\n2. –ó–∞–ø–∏—à–∏—Ç–µ –∞—É–¥–∏–æ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º...",
                        "notes": "–ù–∞ —É—Ä–æ–∫–µ –∏–∑—É—á–∏–ª–∏ –±–∞–∑–æ–≤—ã–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—é —Ç–æ–Ω–æ–≤.",
                        "vocabulary": [
                            {
                                "word": "‰∏Ä",
                                "pinyin": "yƒ´",
                                "translation": "–æ–¥–∏–Ω",
                                "example": "‰∏Ä‰∏™‰∫∫ (yƒ´ ge r√©n) - –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫"
                            },
                            {
                                "word": "‰∫å",
                                "pinyin": "√®r",
                                "translation": "–¥–≤–∞",
                                "example": "‰∫åÂçÅ (√®r sh√≠) - –¥–≤–∞–¥—Ü–∞—Ç—å"
                            }
                        ]
                    }
                }
            }
        },
        404: {"description": "–£—Ä–æ–∫ –∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}
    }
)
async def get_materials(
    lesson_id: str = Path(..., description="ID —É—Ä–æ–∫–∞"),
    storage_service: StorageServiceInterface = Depends(get_storage_service)
):
    """–ü–æ–ª—É—á–∏—Ç—å —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"""
    
    lesson = await storage_service.get_lesson(lesson_id)
    if not lesson:
        raise HTTPException(status_code=404, detail="Lesson not found")
    
    if not lesson.materials_id:
        raise HTTPException(status_code=404, detail="Materials not available")
    
    # Get materials from storage
    materials_data = await storage_service.get_json(f"materials_{lesson.materials_id}")
    if not materials_data:
        raise HTTPException(status_code=404, detail="Materials data not found")
    
    return materials_data


@app.get(
    "/debug/api-logs",
    tags=["Debug"],
    summary="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤",
    description="""
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–∏ –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ curl.
    
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏:
    - Recall.ai
    - AssemblyAI
    - YandexGPT
    
    –ö–∞–∂–¥—ã–π –ª–æ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ—Ç–æ–≤—É—é curl –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
    """,
    responses={
        200: {
            "description": "–õ–æ–≥–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤",
            "content": {
                "application/json": {
                    "example": {
                        "logs": [
                            {
                                "request_id": "recall_20240120_143022_123456",
                                "timestamp": "2024-01-20T14:30:22.123456",
                                "service": "recall",
                                "method": "POST",
                                "url": "https://api.recall.ai/api/v1/bot",
                                "status_code": 200,
                                "curl_command": "curl -X POST \\\n  -H \"Authorization: ***HIDDEN***\" \\\n  -d '{\"meeting_url\":\"https://zoom.us/j/123\"}' \\\n  \"https://api.recall.ai/api/v1/bot\""
                            }
                        ],
                        "total": 1,
                        "service_filter": None,
                        "log_directory": "/app/logs/api_requests"
                    }
                }
            }
        }
    }
)
async def get_api_logs(
    service: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å–µ—Ä–≤–∏—Å—É (recall, assemblyai, yandexgpt)"),
    date: Optional[str] = Query(None, description="–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD"),
    limit: int = Query(50, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", ge=1, le=1000)
):
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    
    try:
        from .utils.api_logger import get_api_logs as get_logs
        
        logs_data = await get_logs(
            service_name=service,
            date=date,
            limit=limit
        )
        
        return logs_data
        
    except Exception as e:
        logger.error(f"Failed to get API logs: {e}")
        return {
            "logs": [],
            "total": 0,
            "error": str(e),
            "service_filter": service,
            "log_directory": "/app/logs/api_requests"
        }


@app.post(
    "/webhooks/recall",
    tags=["Webhooks"],
    summary="Webhook –¥–ª—è Recall.ai",
    description="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Recall.ai –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–ø–∏—Å–∏",
    include_in_schema=False  # –°–∫—Ä—ã–≤–∞–µ–º –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
)
async def handle_recall_webhook(
    webhook_data: Dict[str, Any],
    background_tasks: BackgroundTasks,
    recording_service: RecordingServiceInterface = Depends(get_recording_service),
    transcription_service: TranscriptionServiceInterface = Depends(get_transcription_service),
    storage_service: StorageServiceInterface = Depends(get_storage_service)
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhooks –æ—Ç Recall.ai"""
    
    try:
        event_type = webhook_data.get("event")
        bot_id = webhook_data.get("data", {}).get("bot_id")
        
        logger.info(f"Received Recall webhook: {event_type} for bot {bot_id}")
        
        # Handle recording completed event
        if event_type == "bot.call_ended":
            # Get recording session
            recording_session = await recording_service.get_recording_status(bot_id)
            
            # Find lesson by recording session ID
            lessons = await storage_service.list_lessons()
            lesson = next((l for l in lessons if l.recording_session_id == bot_id), None)
            
            if lesson:
                # Update lesson status
                lesson.status = "transcribing"
                lesson.ended_at = datetime.now()
                await storage_service.save_lesson(lesson)
                
                # Start transcription in background
                background_tasks.add_task(
                    process_recording,
                    lesson.id,
                    recording_session.recording_url,
                    transcription_service,
                    storage_service
                )
        
        return {"status": "ok"}
        
    except Exception as e:
        logger.error(f"Failed to handle Recall webhook: {e}")
        return {"status": "error", "message": str(e)}


@app.post(
    "/webhooks/assemblyai",
    tags=["Webhooks"],
    summary="Webhook –¥–ª—è AssemblyAI",
    description="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç AssemblyAI –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏",
    include_in_schema=False  # –°–∫—Ä—ã–≤–∞–µ–º –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
)
async def handle_assemblyai_webhook(
    webhook_data: Dict[str, Any],
    background_tasks: BackgroundTasks,
    transcription_service: TranscriptionServiceInterface = Depends(get_transcription_service),
    ai_processor: AIProcessorInterface = Depends(get_ai_processor),
    storage_service: StorageServiceInterface = Depends(get_storage_service)
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhooks –æ—Ç AssemblyAI"""
    
    try:
        transcript_id = webhook_data.get("transcript_id")
        status = webhook_data.get("status")
        
        logger.info(f"Received AssemblyAI webhook: {status} for transcript {transcript_id}")
        
        # Handle transcription completed
        if status == "completed" and transcript_id:
            # Get transcription result
            transcription_result = await transcription_service.get_transcription_result(transcript_id)
            
            # Find lesson by transcription ID
            lessons = await storage_service.list_lessons()
            lesson = next((l for l in lessons if l.transcription_id == transcript_id), None)
            
            if lesson:
                # Save transcript
                await storage_service.save_json(
                    f"transcript_{transcript_id}",
                    {
                        "id": transcription_result.id,
                        "text": transcription_result.text,
                        "segments": [
                            {
                                "text": seg.text,
                                "start": seg.start,
                                "end": seg.end,
                                "speaker": seg.speaker
                            }
                            for seg in transcription_result.segments
                        ],
                        "language": transcription_result.language_code,
                        "duration": transcription_result.duration
                    }
                )
                
                # Update lesson status
                lesson.status = "processing"
                await storage_service.save_lesson(lesson)
                
                # Process with AI in background
                background_tasks.add_task(
                    process_transcript,
                    lesson.id,
                    transcription_result.text,
                    lesson.lesson_type,
                    lesson.metadata.get("student_level"),
                    ai_processor,
                    storage_service
                )
        
        return {"status": "ok"}
        
    except Exception as e:
        logger.error(f"Failed to handle AssemblyAI webhook: {e}")
        return {"status": "error", "message": str(e)}


# Background tasks
async def process_recording(
    lesson_id: str,
    recording_url: str,
    transcription_service: TranscriptionServiceInterface,
    storage_service: StorageServiceInterface
):
    """Process recording and start transcription"""
    
    try:
        logger.info(f"Processing recording for lesson {lesson_id}")
        
        # Get lesson
        lesson = await storage_service.get_lesson(lesson_id)
        if not lesson:
            logger.error(f"Lesson {lesson_id} not found")
            return
        
        # Start transcription
        webhook_url = f"{settings.APP_URL}/webhooks/assemblyai"
        
        if lesson.lesson_type == "chinese":
            # Use multilingual transcription
            transcription_result = await transcription_service.transcribe_multilingual(
                audio_url=recording_url,
                primary_language="ru",
                secondary_languages=["zh"],
                webhook_url=webhook_url,
                metadata={"lesson_id": lesson_id}
            )
        else:
            # Regular transcription
            transcription_result = await transcription_service.transcribe_audio(
                audio_url=recording_url,
                language_code="ru",
                webhook_url=webhook_url,
                metadata={"lesson_id": lesson_id}
            )
        
        # Update lesson with transcription ID
        lesson.transcription_id = transcription_result.id
        await storage_service.save_lesson(lesson)
        
        logger.info(f"Started transcription {transcription_result.id} for lesson {lesson_id}")
        
    except Exception as e:
        logger.error(f"Failed to process recording: {e}")
        # Update lesson status to failed
        lesson = await storage_service.get_lesson(lesson_id)
        if lesson:
            lesson.status = "failed"
            await storage_service.save_lesson(lesson)


async def process_transcript(
    lesson_id: str,
    transcript: str,
    lesson_type: str,
    student_level: Optional[str],
    ai_processor: AIProcessorInterface,
    storage_service: StorageServiceInterface
):
    """Process transcript with AI"""
    
    try:
        logger.info(f"Processing transcript for lesson {lesson_id}")
        
        # Get lesson
        lesson = await storage_service.get_lesson(lesson_id)
        if not lesson:
            logger.error(f"Lesson {lesson_id} not found")
            return
        
        # Process with AI
        request = AIProcessingRequest(
            transcript=transcript,
            lesson_type=lesson_type,
            student_level=student_level,
            lesson_duration=lesson.ended_at.timestamp() - lesson.started_at.timestamp() if lesson.started_at and lesson.ended_at else None,
            metadata={"lesson_id": lesson_id}
        )
        
        materials = await ai_processor.process_lesson(request)
        
        # Save materials
        materials_id = f"mat_{datetime.now().timestamp()}"
        await storage_service.save_json(
            f"materials_{materials_id}",
            {
                "lesson_id": lesson_id,
                "original_transcript": materials.original_transcript,
                "corrected_transcript": materials.corrected_transcript,
                "summary": materials.summary,
                "homework": materials.homework,
                "notes": materials.notes,
                "vocabulary": materials.key_vocabulary,
                "created_at": materials.created_at.isoformat()
            }
        )
        
        # Update lesson
        lesson.materials_id = materials_id
        lesson.status = "completed"
        await storage_service.save_lesson(lesson)
        
        logger.info(f"Completed processing for lesson {lesson_id}")
        
    except Exception as e:
        logger.error(f"Failed to process transcript: {e}")
        # Update lesson status to failed
        lesson = await storage_service.get_lesson(lesson_id)
        if lesson:
            lesson.status = "failed"
            await storage_service.save_lesson(lesson) 