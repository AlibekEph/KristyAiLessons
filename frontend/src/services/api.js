import axios from 'axios';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
const api = axios.create({
  baseURL: process.env.NODE_ENV === 'production' ? '/api' : '/api',
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptors –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
api.interceptors.request.use(
  (config) => {
    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ development
    if (process.env.NODE_ENV !== 'production') {
      console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`, config.data);
    }
    return config;
  },
  (error) => {
    console.error('‚ùå API Request Error:', error);
    return Promise.reject(error);
  }
);

api.interceptors.response.use(
  (response) => {
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –≤ development
    if (process.env.NODE_ENV !== 'production') {
      console.log(`‚úÖ API Response: ${response.config.method?.toUpperCase()} ${response.config.url}`, response.data);
    }
    return response;
  },
  (error) => {
    console.error('‚ùå API Response Error:', error.response?.data || error.message);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
    if (error.response?.status === 404) {
      console.warn('üîç Resource not found');
    } else if (error.response?.status >= 500) {
      console.error('üö® Server error occurred');
    }
    
    return Promise.reject(error);
  }
);

// API –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Ä–æ–∫–∞–º–∏
export const lessonsAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤
  async getAll() {
    try {
      // –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤, —Å–∏–º—É–ª–∏—Ä—É–µ–º –µ–≥–æ
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã GET /lessons
      const response = await api.get('/');
      return { lessons: [] }; // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    } catch (error) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤: ' + error.message);
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–∫ –ø–æ ID
  async getById(lessonId) {
    try {
      const response = await api.get(`/lessons/${lessonId}`);
      return response.data;
    } catch (error) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Ä–æ–∫ ${lessonId}: ` + error.message);
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫
  async create(lessonData) {
    try {
      const response = await api.post('/lessons/record', lessonData);
      return response.data;
    } catch (error) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫: ' + error.message);
    }
  },

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —É—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ polling
  async processLesson(lessonId, options = {}) {
    try {
      const payload = {
        lesson_id: lessonId,
        timeout: options.timeout || 3600,
        interval: options.interval || 30,
      };
      const response = await api.post('/lessons/process', payload);
      return response.data;
    } catch (error) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —É—Ä–æ–∫–∞: ' + error.message);
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —É—Ä–æ–∫–∞
  async getTranscript(lessonId) {
    try {
      const response = await api.get(`/lessons/${lessonId}/transcript`);
      return response.data;
    } catch (error) {
      if (error.response?.status === 404) {
        throw new Error('–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞');
      }
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: ' + error.message);
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞
  async getMaterials(lessonId) {
    try {
      const response = await api.get(`/lessons/${lessonId}/materials`);
      return response.data;
    } catch (error) {
      if (error.response?.status === 404) {
        throw new Error('–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã');
      }
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: ' + error.message);
    }
  },
};

// API –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
export const debugAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
  async getLogs(filters = {}) {
    try {
      const params = new URLSearchParams();
      if (filters.service) params.append('service', filters.service);
      if (filters.date) params.append('date', filters.date);
      if (filters.limit) params.append('limit', filters.limit);
      
      const response = await api.get(`/debug/api-logs?${params}`);
      return response.data;
    } catch (error) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏: ' + error.message);
    }
  },
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
export const apiUtils = {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  async healthCheck() {
    try {
      const response = await api.get('/');
      return response.data.status === 'ok';
    } catch (error) {
      console.error('Health check failed:', error);
      return false;
    }
  },

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ API
  formatError(error) {
    if (error.response?.data?.detail) {
      return error.response.data.detail;
    }
    if (error.response?.data?.message) {
      return error.response.data.message;
    }
    if (error.message) {
      return error.message;
    }
    return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  },

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
  extractData(response) {
    return response?.data || response;
  },
};

export default api; 