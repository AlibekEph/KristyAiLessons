#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Recall.ai
–°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: https://docs.recall.ai/reference/bot_create
"""

import asyncio
import os
import json
from dotenv import load_dotenv
import aiohttp

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_recall_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Recall.ai"""
    
    api_key = os.getenv("RECALL_API_KEY")
    if not api_key or api_key == "your_recall_api_key_here":
        print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π RECALL_API_KEY –≤ —Ñ–∞–π–ª–µ .env")
        return
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    base_url = "https://us-west-2.recall.ai/api/v1"
    headers = {
        "Authorization": f"Token {api_key}",
        "Content-Type": "application/json"
    }
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π payload –¥–ª—è —Ç–µ—Å—Ç–∞
    # –í –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —É–∫–∞–∑–∞–Ω–æ, —á—Ç–æ meeting_url –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    payload = {
        "meeting_url": "https://zoom.us/j/1234567890",  # –¢–µ—Å—Ç–æ–≤—ã–π URL
        "bot_name": "Test Bot",
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—à–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        "transcription_options": {
            "provider": "assembly_ai"
        },
        "recording": {
            "mode": "speaker_view"
        }
    }
    
    print("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ Recall.ai API...")
    print(f"URL: {base_url}/bot/")
    print(f"Headers: {headers}")
    print(f"Payload: {json.dumps(payload, indent=2)}")
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                f"{base_url}/bot/",
                json=payload,
                headers=headers
            ) as response:
                status = response.status
                text = await response.text()
                
                print(f"\nüìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {status}")
                
                if status == 200 or status == 201:
                    data = json.loads(text)
                    print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –±–æ—Ç!")
                    print(f"–û—Ç–≤–µ—Ç: {json.dumps(data, indent=2)}")
                    
                    # –ï—Å–ª–∏ –±–æ—Ç —Å–æ–∑–¥–∞–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
                    if "id" in data:
                        bot_id = data["id"]
                        print(f"\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ {bot_id}...")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–∫–∏–Ω—É—Ç—å –∑–≤–æ–Ω–æ–∫
                        async with session.post(
                            f"{base_url}/bot/{bot_id}/leave_call",
                            headers=headers
                        ) as delete_response:
                            if delete_response.status == 200:
                                print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {text}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
                    if status == 401:
                        print("üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.")
                    elif status == 403:
                        print("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, API –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤.")
                    elif status == 429:
                        print("‚è±Ô∏è  –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (60 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É).")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")


async def test_our_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å"""
    print("\n\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å...")
    
    async with aiohttp.ClientSession() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
            async with session.get("http://localhost:8000/") as response:
                if response.status == 200:
                    print("‚úÖ –ù–∞—à —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print("‚ùå –ù–∞—à —Å–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                    return
                    
            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å
            payload = {
                "meeting_url": "https://zoom.us/j/1234567890",
                "lesson_type": "chinese",
                "student_id": "test_student",
                "metadata": {
                    "test": True
                }
            }
            
            async with session.post(
                "http://localhost:8000/lessons/record",
                json=payload
            ) as response:
                status = response.status
                text = await response.text()
                
                print(f"\nüìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {status}")
                print(f"–û—Ç–≤–µ—Ç: {text}")
                
                if status == 500 and "403" in text:
                    print("\n‚ö†Ô∏è  –ù–∞—à —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ Recall.ai –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 403 (Forbidden)")
                    print("–≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ —Å —Ç–µ—Å—Ç–æ–≤—ã–º API –∫–ª—é—á–æ–º.")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {e}")


async def main():
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Recall.ai\n")
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Recall.ai API
    await test_recall_api()
    
    # –¢–µ—Å—Ç 2: –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å
    await test_our_service()


if __name__ == "__main__":
    asyncio.run(main()) 